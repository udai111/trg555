Features
âœ… Username-only login (no passwords, no email)
âœ… Simulated wallet (â‚¹100,000 starting balance)
âœ… Portfolio tracking (average cost calculation)
âœ… Live stock prices (random fluctuations every 5 sec)
âœ… Leaderboard (sorted by highest portfolio value)
âœ… Data Persistence (localStorage â€“ survives page refresh)

How It Works
Users log in with just a username.
They get â‚¹100,000 dummy money to trade with.
They can buy/sell stocks, which updates their wallet & portfolio.
Stock prices fluctuate every 5 seconds.
The leaderboard updates automatically, ranking users by total portfolio value.
ðŸ“Œ Full Code
Save this file as MiniStockExchange.js
jsx
Copy
Edit
import React, { useState, useEffect } from "react";
import styled from "styled-components";

/* ---------------- MOCK STOCK DATA ---------------- */
const MOCK_STOCKS = [
  { symbol: "RELIANCE", price: 2300 },
  { symbol: "TCS", price: 3100 },
  { symbol: "INFY", price: 1500 },
  { symbol: "HDFCBANK", price: 1600 },
  { symbol: "AXISBANK", price: 900 },
  { symbol: "ITC", price: 330 },
];

/* ---------------- RANDOM PRICE UPDATER ---------------- */
const getRandomFluctuation = (basePrice) => {
  const changePercent = (Math.random() - 0.5) * 0.02; // Â±1%
  return Math.max(1, basePrice * (1 + changePercent));
};

/* ---------------- MAIN APP ---------------- */
function MiniStockExchange() {
  const [username, setUsername] = useState("");
  const [currentUser, setCurrentUser] = useState(null);
  const [currentStockPrices, setCurrentStockPrices] = useState(MOCK_STOCKS);
  const [users, setUsers] = useState({});

  useEffect(() => {
    // Load users from localStorage
    const savedUsers = JSON.parse(localStorage.getItem("stockExchangeUsers")) || {};
    setUsers(savedUsers);
  }, []);

  useEffect(() => {
    // Periodically update stock prices
    const interval = setInterval(() => {
      setCurrentStockPrices((prev) =>
        prev.map((s) => ({
          ...s,
          price: parseFloat(getRandomFluctuation(s.price).toFixed(2)),
        }))
      );
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  const handleLogin = () => {
    if (!username.trim()) return alert("Enter a valid username");

    let savedUsers = { ...users };
    if (!savedUsers[username]) {
      savedUsers[username] = {
        wallet: 100000,
        portfolio: {},
      };
    }
    setUsers(savedUsers);
    setCurrentUser({ ...savedUsers[username], username });

    localStorage.setItem("stockExchangeUsers", JSON.stringify(savedUsers));
  };

  return (
    <AppContainer>
      {!currentUser ? (
        <LoginPanel>
          <h1>Mini Stock Exchange</h1>
          <input
            type="text"
            placeholder="Enter Username"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
          />
          <button onClick={handleLogin}>Enter</button>
        </LoginPanel>
      ) : (
        <Exchange currentUser={currentUser} setUsers={setUsers} users={users} stockPrices={currentStockPrices} />
      )}
    </AppContainer>
  );
}

export default MiniStockExchange;

/* ---------------- EXCHANGE COMPONENT ---------------- */
function Exchange({ currentUser, setUsers, users, stockPrices }) {
  const [selectedStock, setSelectedStock] = useState(null);
  const [quantity, setQuantity] = useState("");

  const handleTransaction = (type) => {
    if (!quantity || quantity <= 0) return alert("Enter a valid quantity");

    const stock = stockPrices.find((s) => s.symbol === selectedStock);
    if (!stock) return;

    let newWallet = currentUser.wallet;
    let newPortfolio = { ...currentUser.portfolio };

    if (type === "buy") {
      const cost = stock.price * quantity;
      if (cost > newWallet) return alert("Insufficient funds");

      newWallet -= cost;
      if (!newPortfolio[selectedStock]) {
        newPortfolio[selectedStock] = { quantity: 0, avgCost: 0 };
      }
      let holding = newPortfolio[selectedStock];
      holding.avgCost =
        (holding.quantity * holding.avgCost + cost) / (holding.quantity + Number(quantity));
      holding.quantity += Number(quantity);
    } else {
      if (!newPortfolio[selectedStock] || newPortfolio[selectedStock].quantity < quantity) {
        return alert("Not enough shares to sell");
      }
      newWallet += stock.price * quantity;
      newPortfolio[selectedStock].quantity -= quantity;
      if (newPortfolio[selectedStock].quantity === 0) delete newPortfolio[selectedStock];
    }

    let updatedUser = { ...currentUser, wallet: newWallet, portfolio: newPortfolio };
    let updatedUsers = { ...users, [currentUser.username]: updatedUser };
    setUsers(updatedUsers);
    localStorage.setItem("stockExchangeUsers", JSON.stringify(updatedUsers));
  };

  return (
    <ExchangeContainer>
      <Sidebar>
        <WalletSection>
          <h3>Wallet</h3>
          <p>Balance: â‚¹{currentUser.wallet.toFixed(2)}</p>
        </WalletSection>
        <PortfolioSection>
          <h3>Portfolio</h3>
          {Object.keys(currentUser.portfolio).length === 0 ? (
            <p>No holdings yet</p>
          ) : (
            Object.entries(currentUser.portfolio).map(([symbol, data]) => (
              <HoldingCard key={symbol}>
                <strong>{symbol}</strong>
                <p>Qty: {data.quantity}</p>
                <p>Avg Cost: â‚¹{data.avgCost.toFixed(2)}</p>
              </HoldingCard>
            ))
          )}
        </PortfolioSection>
      </Sidebar>

      <MainArea>
        <h2>Live Market</h2>
        <StockGrid>
          {stockPrices.map((s, idx) => (
            <StockItem key={idx} onClick={() => setSelectedStock(s.symbol)}>
              <strong>{s.symbol}</strong>
              <p>Price: â‚¹{s.price.toFixed(2)}</p>
            </StockItem>
          ))}
        </StockGrid>

        {selectedStock && (
          <TradePanel>
            <h3>Trade: {selectedStock}</h3>
            <input type="number" placeholder="Qty" value={quantity} onChange={(e) => setQuantity(e.target.value)} />
            <TradeButtons>
              <button onClick={() => handleTransaction("buy")}>Buy</button>
              <button onClick={() => handleTransaction("sell")}>Sell</button>
              <button onClick={() => setSelectedStock(null)}>Cancel</button>
            </TradeButtons>
          </TradePanel>
        )}
      </MainArea>

      <Leaderboard users={users} />
    </ExchangeContainer>
  );
}

/* ---------------- LEADERBOARD COMPONENT ---------------- */
function Leaderboard({ users }) {
  const rankedUsers = Object.entries(users)
    .map(([name, data]) => ({
      name,
      totalValue: data.wallet + Object.entries(data.portfolio).reduce((sum, [symbol, stock]) => sum + stock.quantity * MOCK_STOCKS.find((s) => s.symbol === symbol).price, 0),
    }))
    .sort((a, b) => b.totalValue - a.totalValue);

  return (
    <LeaderboardContainer>
      <h3>Leaderboard</h3>
      {rankedUsers.map((user, idx) => (
        <p key={idx}>{idx + 1}. {user.name} - â‚¹{user.totalValue.toFixed(2)}</p>
      ))}
    </LeaderboardContainer>
  );
}

/* ---------------- STYLED COMPONENTS ---------------- */
const AppContainer = styled.div`text-align: center; font-family: Arial, sans-serif;`;
const LoginPanel = styled.div`margin-top: 50px;`;
const ExchangeContainer = styled.div`display: flex;`;
const Sidebar = styled.div`width: 250px; padding: 10px; background: #1e1e1e;`;
const MainArea = styled.div`flex: 1; padding: 10px;`;
const StockGrid = styled.div`display: flex; gap: 10px;`;
const StockItem = styled.div`background: #2a2a2a; padding: 10px; cursor: pointer;`;
const TradePanel = styled.div`margin-top: 10px;`;
const TradeButtons = styled.div`display: flex; gap: 5px;`;
const WalletSection = styled.div`margin-bottom: 20px;`;
const PortfolioSection = styled.div``;
const HoldingCard = styled.div``;
const LeaderboardContainer = styled.div`width: 200px; padding: 10px; background: #2a2a2a;`;

âœ… Leaderboard dynamically updates âœ… Simple Username Login âœ… Stocks update every 5 seconds
ðŸ”¥ Now you have a fully working stock simulation game! ðŸš€












